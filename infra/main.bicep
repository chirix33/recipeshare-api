// The templates are generated by bicep IaC generator
targetScope = 'subscription'

param location string = 'eastus'
param resourceGroupName string = 'rg-myenv'
param resourceToken string = toLower(uniqueString(subscription().id, location, resourceGroupName))
param containerAppRecipeshareapiName string = 'peshareapi${resourceToken}'
param openAIAi0Name string = 'ai0${resourceToken}'
param keyVaultName string = 'kv${resourceToken}'
param containerAppEnvName string = 'env${resourceToken}'
param containerRegistryName string = 'acr${resourceToken}'


// Deploy an Azure Resource Group

resource resourceGroup 'Microsoft.Resources/resourceGroups@2021-04-01' = {
	name: resourceGroupName
	location: location
}

// Deploy an Azure Container App environment

module containerAppEnv 'containerappenv.bicep' = {
	name: 'container-app-env-deployment'
	scope: resourceGroup
	params: {
		location: location
		name: containerAppEnvName
	}
}
var containerAppEnvId = containerAppEnv.outputs.id

// Deploy an Azure Container Registry

module containerRegistry 'containerregistry.bicep' = {
	name: 'container-registry-deployment'
	scope: resourceGroup
	params: {
		location: location
		name: containerRegistryName
	}
}

// Deploy an Azure Container App

module containerAppRecipeshareapiDeployment 'containerapp.bicep' = {
	name: 'container-app-recipeshareapi-deployment'
	scope: resourceGroup
	params: {
		location: location
		name: containerAppRecipeshareapiName
		targetPort: 80 
		containerAppEnvId: containerAppEnvId
		identityType: 'SystemAssigned'
		containerRegistryName: containerRegistryName  
		tags: {'azd-service-name': 'recipeshareapi'}
	}
	dependsOn: [
		containerAppEnv
		containerRegistry
	]
}

// Deploy a Cognitive Service account of OpenAI kind

module openAIAi0Deployment 'openai.bicep' = {
	name: 'openai-ai0-deployment'
	scope: resourceGroup
	params: {
		location: location
		name: openAIAi0Name 
		allowIps: union(containerAppRecipeshareapiDeployment.outputs.outboundIps, [])
		keyVaultName: keyVaultName
		secretName: 'openai-ai0-secret'
	}
	dependsOn: [
		keyVaultDeployment
		containerAppRecipeshareapiDeployment
	]
}

// Deploy an Azure Keyvault

module keyVaultDeployment 'keyvault.bicep' = {
	name: 'key-vault--deployment'
	scope: resourceGroup
	params: {
		location: location
		name: keyVaultName
		principalIds: [
			containerAppRecipeshareapiDeployment.outputs.identityPrincipalId
		] 
		allowIps: union(containerAppRecipeshareapiDeployment.outputs.outboundIps, [])
	}
	dependsOn: [
		containerAppRecipeshareapiDeployment
	]
}

// Deploy an Azure Container App

module containerAppSettingsRecipeshareapiDeployment 'containerapp.bicep' = {
	name: 'container-app-settings-recipeshareapi-deployment'
	scope: resourceGroup
	params: {
		location: location
		name: containerAppRecipeshareapiName
		targetPort: 80 
		secrets: [
			{
				name: 'openaiai0-connstr'
				keyVaultUrl: openAIAi0Deployment.outputs.keyVaultSecretUri
				identity: 'system'
			}
		]
		containerAppEnvId: containerAppEnvId
		identityType: 'SystemAssigned'
		containerRegistryName: containerRegistryName 
		containerEnv: [
			{
				name: 'AZURE_OPENAI_BASE'
				value: openAIAi0Deployment.outputs.endpoint
			}
			{
				name: 'AZURE_OPENAI_DEPLOYMENT'
				value: openAIAi0Deployment.outputs.deploymentName
			}
			{
				name: 'OPENAI_API_KEY'
				secretRef: 'openaiai0-connstr'
			}
			{
				name: 'AZURE_KEYVAULT_RESOURCEENDPOINT'
				value: keyVaultDeployment.outputs.endpoint
			}
		] 
		tags: {'azd-service-name': 'recipeshareapi'}
	}
	dependsOn: [
		openAIAi0Deployment
		keyVaultDeployment
	]
}



output containerAppRecipeshareapiId string = containerAppRecipeshareapiDeployment.outputs.id
output openAIAi0Id string = openAIAi0Deployment.outputs.id
output keyVaultId string = keyVaultDeployment.outputs.id
output containerRegistryRecipeshareapiId string = containerRegistry.outputs.id
output AZURE_CONTAINER_REGISTRY_ENDPOINT string = containerRegistry.outputs.loginServer

